// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AreaSearchStatusPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <iostream>
#include <nng/nng.h>
#include <nng/protocol/pubsub0/sub.h>
#include <chrono>
#include <string>
#include <flatbuffers/flatbuffers.h>

#include "AreaSearchStatus_Generated_FastDDStoFB.h"

#include "AreaSearchStatusPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>

#include "AreaSearchStatusPubSubTypes.hpp"

using namespace eprosima::fastdds::dds;

AreaSearchStatusPublisherApp::AreaSearchStatusPublisherApp(
        const int& domain_id)
    : factory_(nullptr)
    , participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new test_msgs_pkg::msg::AreaSearchStatusPubSubType())
    , matched_(0)
    , samples_sent_(0)
    , stop_(false)
{
    //

    // Create the participant
    DomainParticipantQos pqos = PARTICIPANT_QOS_DEFAULT;
    pqos.name("test_msgs_pkg::msg::AreaSearchStatus_pub_participant");
    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::AreaSearchStatus Participant initialization failed");
    }

    // Register the type
    type_.register_type(participant_);

    // Create the publisher
    PublisherQos pub_qos = PUBLISHER_QOS_DEFAULT;
    participant_->get_default_publisher_qos(pub_qos);
    publisher_ = participant_->create_publisher(pub_qos, nullptr, StatusMask::none());
    if (publisher_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::AreaSearchStatus Publisher initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("AreaSearchStatusTopic", type_.get_type_name(), topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::AreaSearchStatus Topic initialization failed");
    }

    // Create the data writer
    DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
    publisher_->get_default_datawriter_qos(writer_qos);
    writer_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    writer_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    writer_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    writer_ = publisher_->create_datawriter(topic_, writer_qos, this, StatusMask::all());
    if (writer_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::AreaSearchStatus DataWriter initialization failed");
    }
}

AreaSearchStatusPublisherApp::~AreaSearchStatusPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void AreaSearchStatusPublisherApp::on_publication_matched(
        DataWriter* /*writer*/,
        const PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "test_msgs_pkg::msg::AreaSearchStatus Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "test_msgs_pkg::msg::AreaSearchStatus Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void AreaSearchStatusPublisherApp::run()
{
    std::cout << "Waiting to Connect to NNG Publisher\n";
    nng_socket sock;
    int rv;

    if ((rv = nng_sub0_open(&sock)) != 0) {
        std::cerr << "Failed to open sub socket\n";
        return;
    }

    if ((rv = nng_setopt(sock, NNG_OPT_SUB_SUBSCRIBE, "", 0)) != 0) {
        std::cerr << "Failed to set subscribe option\n";
        nng_close(sock);
        return;
    }

    if ((rv = nng_dial(sock, "tcp://127.0.0.1:5554", NULL, 0)) != 0) {
        std::cerr << "Failed to connect to publisher\n";
        nng_close(sock);
        return;
    }

    std::cout << "Connected to publisher. Waiting for messages...\n";

    std::cout << "test_msgs_pkg::msg::Person DataWriter waiting for DataReaders." << std::endl;

    {
        std::unique_lock<std::mutex> lock(mutex_);
        cv_.wait(lock, [this]() { return matched_ > 0 || is_stopped(); });
    }

    std::cout << "MATCHED." << std::endl;

    while (!is_stopped())
    {
        nng_msg* buf = nullptr;


        if ((rv = nng_recvmsg(sock, &buf, 0)) != 0) {
            std::cout << "NNG RECEIVE FAILED\n";
            continue;
        }

        std::cout << "RECEIVED flat buffer from NNG! \n";
        size_t len = nng_msg_len(buf);
        void* data = nng_msg_body(buf);


        AreaSearchStatus_AreaSearchStatus_table_t exampleRead = AreaSearchStatus_AreaSearchStatus_as_root(data);
        test_msgs_pkg::msg::AreaSearchStatus convertedFbPerson;
        CreateFastDDSFromAreaSearchStatus(exampleRead, convertedFbPerson);


        std::cout << "\n=== Publishing to FastDDS/ROS2 ===" << std::endl;
        std::cout << "Vehicle ID: " << convertedFbPerson.vehicle_id() << std::endl;
        std::cout << "Timestamp (epoch usec): " << convertedFbPerson.timestamp_epoch_usec() << std::endl;
        std::cout << "Estimated Completion Time (epoch usec): " << convertedFbPerson.estimated_completion_time_epoch_usec() << std::endl;
        std::cout << "Estimated Percent Complete: " << convertedFbPerson.estimated_percent_complete() << "%" << std::endl;
        // Heatmap bounding box
        std::cout << "\n--- Heatmap Bounding Box ---" << std::endl;
        std::cout << "Bottom Right Point:" << std::endl;
        std::cout << "  Latitude: " << convertedFbPerson.heatmap_bounding_box().bottom_right_point().latitude_deg() << std::endl;
        std::cout << "  Longitude: " << convertedFbPerson.heatmap_bounding_box().bottom_right_point().longitude_deg() << std::endl;
        std::cout << "  Altitude MSL: " << convertedFbPerson.heatmap_bounding_box().bottom_right_point().altitude_msl_m() << "m" << std::endl;
        std::cout << "Upper Left Point:" << std::endl;
        std::cout << "  Latitude: " << convertedFbPerson.heatmap_bounding_box().upper_left_point().latitude_deg() << std::endl;
        std::cout << "  Longitude: " << convertedFbPerson.heatmap_bounding_box().upper_left_point().longitude_deg() << std::endl;
        std::cout << "  Altitude MSL: " << convertedFbPerson.heatmap_bounding_box().upper_left_point().altitude_msl_m() << "m" << std::endl;
        // Heatmap data
        std::cout << "\n--- Heatmap Data ---" << std::endl;
        std::cout << "Dimensions: " << convertedFbPerson.heatmap_width()
            << " x " << convertedFbPerson.heatmap_height() << std::endl;
        std::cout << "Data (" << convertedFbPerson.heatmap_data().size() << " bytes): ";
        for (size_t i = 0; i < convertedFbPerson.heatmap_data().size(); ++i) {
            std::cout << (int)convertedFbPerson.heatmap_data()[i] << " ";
        }
        std::cout << std::endl;

        // Geometry information
        std::cout << "\n--- Geometry Information ---" << std::endl;
        uint8_t geom_type = convertedFbPerson.active_geometry_type();
        std::cout << "Active Geometry Type: " << (int)geom_type << std::endl;

        switch (geom_type) {
        case 1: // CIRCLE  
            std::cout << "Active Geometry: CIRCLE" << std::endl;
            if (convertedFbPerson.circle().size() > 0) {
                const auto& circle = convertedFbPerson.circle()[0];
                std::cout << "Circle:" << std::endl;
                std::cout << "  Center: " << circle.center() << std::endl;
                std::cout << "  Radius: " << circle.radius_m() << "m" << std::endl;
            }
            else {
                std::cout << "No circle data" << std::endl;
            }
            break;

        case 0: // POLYGON
            std::cout << "Active Geometry: POLYGON" << std::endl;
            if (convertedFbPerson.polygon().size() > 0) {
                const auto& polygon = convertedFbPerson.polygon()[0];
                std::cout << "Polygon:" << std::endl;
                std::cout << "  Bounding Points: " << polygon.bounding_points() << std::endl;
            }
            else {
                std::cout << "No polygon data" << std::endl;
            }
            break;

        default:
            std::cout << "Unknown geometry type: " << (int)geom_type << std::endl;
            break;
        }

        // Based on which array has data, you can deduce:
        // If geom_type == X and polygon.size() > 0, then X = POLYGON
        // If geom_type == Y and circle.size() > 0, then Y = CIRCLE

        //std::cout << "\n--- Publishing Message ---" << std::endl;
        std::cout << "\n--- Publishing Message ---" << std::endl;
        writer_->write(&convertedFbPerson);
        std::cout << "Successfully published to FastDDS/ROS2!" << std::endl;
    }
    nng_close(sock);
}


bool AreaSearchStatusPublisherApp::publish()
{
    bool ret = false;
    // Wait for the data endpoints discovery
    std::unique_lock<std::mutex> matched_lock(mutex_);
    cv_.wait(matched_lock, [&]()
            {
                // at least one has been discovered
                return ((matched_ > 0) || is_stopped());
            });

    if (!is_stopped())
    {
        /* Initialize your structure here */
        test_msgs_pkg::msg::AreaSearchStatus sample_;
        ret = (RETCODE_OK == writer_->write(&sample_));
    }
    return ret;
}

bool AreaSearchStatusPublisherApp::is_stopped()
{
    return stop_.load();
}

void AreaSearchStatusPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
}