// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shapecollection.proto
// Protobuf C++ Version: 5.29.3

#ifndef shapecollection_2eproto_2epb_2eh
#define shapecollection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "grid.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_shapecollection_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_shapecollection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_shapecollection_2eproto;
namespace shapecollection {
class Directions;
struct DirectionsDefaultTypeInternal;
extern DirectionsDefaultTypeInternal _Directions_default_instance_;
class Geometry;
struct GeometryDefaultTypeInternal;
extern GeometryDefaultTypeInternal _Geometry_default_instance_;
}  // namespace shapecollection
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace shapecollection {

// ===================================================================


// -------------------------------------------------------------------

class Geometry final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shapecollection.Geometry) */ {
 public:
  inline Geometry() : Geometry(nullptr) {}
  ~Geometry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Geometry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Geometry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Geometry(
      ::google::protobuf::internal::ConstantInitialized);

  inline Geometry(const Geometry& from) : Geometry(nullptr, from) {}
  inline Geometry(Geometry&& from) noexcept
      : Geometry(nullptr, std::move(from)) {}
  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry& operator=(Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Geometry& default_instance() {
    return *internal_default_instance();
  }
  enum ShapeTypeCase {
    kStar = 3,
    kSquare = 4,
    SHAPE_TYPE_NOT_SET = 0,
  };
  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
        &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Geometry& a, Geometry& b) { a.Swap(&b); }
  inline void Swap(Geometry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geometry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Geometry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Geometry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Geometry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Geometry& from) { Geometry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Geometry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shapecollection.Geometry"; }

 protected:
  explicit Geometry(::google::protobuf::Arena* arena);
  Geometry(::google::protobuf::Arena* arena, const Geometry& from);
  Geometry(::google::protobuf::Arena* arena, Geometry&& from) noexcept
      : Geometry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kActiveFieldNumber = 2,
    kStarFieldNumber = 3,
    kSquareFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool active = 2;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // .grid.Star star = 3;
  bool has_star() const;
  private:
  bool _internal_has_star() const;

  public:
  void clear_star() ;
  const ::grid::Star& star() const;
  PROTOBUF_NODISCARD ::grid::Star* release_star();
  ::grid::Star* mutable_star();
  void set_allocated_star(::grid::Star* value);
  void unsafe_arena_set_allocated_star(::grid::Star* value);
  ::grid::Star* unsafe_arena_release_star();

  private:
  const ::grid::Star& _internal_star() const;
  ::grid::Star* _internal_mutable_star();

  public:
  // .grid.Square square = 4;
  bool has_square() const;
  private:
  bool _internal_has_square() const;

  public:
  void clear_square() ;
  const ::grid::Square& square() const;
  PROTOBUF_NODISCARD ::grid::Square* release_square();
  ::grid::Square* mutable_square();
  void set_allocated_square(::grid::Square* value);
  void unsafe_arena_set_allocated_square(::grid::Square* value);
  ::grid::Square* unsafe_arena_release_square();

  private:
  const ::grid::Square& _internal_square() const;
  ::grid::Square* _internal_mutable_square();

  public:
  void clear_shape_type();
  ShapeTypeCase shape_type_case() const;
  // @@protoc_insertion_point(class_scope:shapecollection.Geometry)
 private:
  class _Internal;
  void set_has_star();
  void set_has_square();
  inline bool has_shape_type() const;
  inline void clear_has_shape_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 2,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Geometry& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool active_;
    union ShapeTypeUnion {
      constexpr ShapeTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::grid::Star* star_;
      ::grid::Square* square_;
    } shape_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shapecollection_2eproto;
};
// -------------------------------------------------------------------

class Directions final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:shapecollection.Directions) */ {
 public:
  inline Directions() : Directions(nullptr) {}
  ~Directions() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Directions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Directions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Directions(
      ::google::protobuf::internal::ConstantInitialized);

  inline Directions(const Directions& from) : Directions(nullptr, from) {}
  inline Directions(Directions&& from) noexcept
      : Directions(nullptr, std::move(from)) {}
  inline Directions& operator=(const Directions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Directions& operator=(Directions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Directions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Directions* internal_default_instance() {
    return reinterpret_cast<const Directions*>(
        &_Directions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Directions& a, Directions& b) { a.Swap(&b); }
  inline void Swap(Directions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Directions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Directions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Directions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Directions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Directions& from) { Directions::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Directions* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "shapecollection.Directions"; }

 protected:
  explicit Directions(::google::protobuf::Arena* arena);
  Directions(::google::protobuf::Arena* arena, const Directions& from);
  Directions(::google::protobuf::Arena* arena, Directions&& from) noexcept
      : Directions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDirectionNameFieldNumber = 1,
    kShapeMetricsFieldNumber = 3,
    kActiveFieldNumber = 2,
  };
  // string direction_name = 1;
  void clear_direction_name() ;
  const std::string& direction_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_direction_name(Arg_&& arg, Args_... args);
  std::string* mutable_direction_name();
  PROTOBUF_NODISCARD std::string* release_direction_name();
  void set_allocated_direction_name(std::string* value);

  private:
  const std::string& _internal_direction_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_direction_name(
      const std::string& value);
  std::string* _internal_mutable_direction_name();

  public:
  // .grid.Shapes shape_metrics = 3;
  bool has_shape_metrics() const;
  void clear_shape_metrics() ;
  const ::grid::Shapes& shape_metrics() const;
  PROTOBUF_NODISCARD ::grid::Shapes* release_shape_metrics();
  ::grid::Shapes* mutable_shape_metrics();
  void set_allocated_shape_metrics(::grid::Shapes* value);
  void unsafe_arena_set_allocated_shape_metrics(::grid::Shapes* value);
  ::grid::Shapes* unsafe_arena_release_shape_metrics();

  private:
  const ::grid::Shapes& _internal_shape_metrics() const;
  ::grid::Shapes* _internal_mutable_shape_metrics();

  public:
  // bool active = 2;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:shapecollection.Directions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Directions& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr direction_name_;
    ::grid::Shapes* shape_metrics_;
    bool active_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_shapecollection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Geometry

// string name = 1;
inline void Geometry::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Geometry::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shapecollection.Geometry.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Geometry::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shapecollection.Geometry.name)
}
inline std::string* Geometry::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:shapecollection.Geometry.name)
  return _s;
}
inline const std::string& Geometry::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Geometry::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Geometry::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Geometry::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shapecollection.Geometry.name)
  return _impl_.name_.Release();
}
inline void Geometry::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shapecollection.Geometry.name)
}

// bool active = 2;
inline void Geometry::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool Geometry::active() const {
  // @@protoc_insertion_point(field_get:shapecollection.Geometry.active)
  return _internal_active();
}
inline void Geometry::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:shapecollection.Geometry.active)
}
inline bool Geometry::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void Geometry::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// .grid.Star star = 3;
inline bool Geometry::has_star() const {
  return shape_type_case() == kStar;
}
inline bool Geometry::_internal_has_star() const {
  return shape_type_case() == kStar;
}
inline void Geometry::set_has_star() {
  _impl_._oneof_case_[0] = kStar;
}
inline ::grid::Star* Geometry::release_star() {
  // @@protoc_insertion_point(field_release:shapecollection.Geometry.star)
  if (shape_type_case() == kStar) {
    clear_has_shape_type();
    auto* temp = _impl_.shape_type_.star_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.shape_type_.star_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grid::Star& Geometry::_internal_star() const {
  return shape_type_case() == kStar ? *_impl_.shape_type_.star_ : reinterpret_cast<::grid::Star&>(::grid::_Star_default_instance_);
}
inline const ::grid::Star& Geometry::star() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shapecollection.Geometry.star)
  return _internal_star();
}
inline ::grid::Star* Geometry::unsafe_arena_release_star() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shapecollection.Geometry.star)
  if (shape_type_case() == kStar) {
    clear_has_shape_type();
    auto* temp = _impl_.shape_type_.star_;
    _impl_.shape_type_.star_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Geometry::unsafe_arena_set_allocated_star(::grid::Star* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_shape_type();
  if (value) {
    set_has_star();
    _impl_.shape_type_.star_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shapecollection.Geometry.star)
}
inline ::grid::Star* Geometry::_internal_mutable_star() {
  if (shape_type_case() != kStar) {
    clear_shape_type();
    set_has_star();
    _impl_.shape_type_.star_ =
        ::google::protobuf::Message::DefaultConstruct<::grid::Star>(GetArena());
  }
  return _impl_.shape_type_.star_;
}
inline ::grid::Star* Geometry::mutable_star() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::grid::Star* _msg = _internal_mutable_star();
  // @@protoc_insertion_point(field_mutable:shapecollection.Geometry.star)
  return _msg;
}

// .grid.Square square = 4;
inline bool Geometry::has_square() const {
  return shape_type_case() == kSquare;
}
inline bool Geometry::_internal_has_square() const {
  return shape_type_case() == kSquare;
}
inline void Geometry::set_has_square() {
  _impl_._oneof_case_[0] = kSquare;
}
inline ::grid::Square* Geometry::release_square() {
  // @@protoc_insertion_point(field_release:shapecollection.Geometry.square)
  if (shape_type_case() == kSquare) {
    clear_has_shape_type();
    auto* temp = _impl_.shape_type_.square_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.shape_type_.square_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::grid::Square& Geometry::_internal_square() const {
  return shape_type_case() == kSquare ? *_impl_.shape_type_.square_ : reinterpret_cast<::grid::Square&>(::grid::_Square_default_instance_);
}
inline const ::grid::Square& Geometry::square() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shapecollection.Geometry.square)
  return _internal_square();
}
inline ::grid::Square* Geometry::unsafe_arena_release_square() {
  // @@protoc_insertion_point(field_unsafe_arena_release:shapecollection.Geometry.square)
  if (shape_type_case() == kSquare) {
    clear_has_shape_type();
    auto* temp = _impl_.shape_type_.square_;
    _impl_.shape_type_.square_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Geometry::unsafe_arena_set_allocated_square(::grid::Square* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_shape_type();
  if (value) {
    set_has_square();
    _impl_.shape_type_.square_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shapecollection.Geometry.square)
}
inline ::grid::Square* Geometry::_internal_mutable_square() {
  if (shape_type_case() != kSquare) {
    clear_shape_type();
    set_has_square();
    _impl_.shape_type_.square_ =
        ::google::protobuf::Message::DefaultConstruct<::grid::Square>(GetArena());
  }
  return _impl_.shape_type_.square_;
}
inline ::grid::Square* Geometry::mutable_square() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::grid::Square* _msg = _internal_mutable_square();
  // @@protoc_insertion_point(field_mutable:shapecollection.Geometry.square)
  return _msg;
}

inline bool Geometry::has_shape_type() const {
  return shape_type_case() != SHAPE_TYPE_NOT_SET;
}
inline void Geometry::clear_has_shape_type() {
  _impl_._oneof_case_[0] = SHAPE_TYPE_NOT_SET;
}
inline Geometry::ShapeTypeCase Geometry::shape_type_case() const {
  return Geometry::ShapeTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Directions

// string direction_name = 1;
inline void Directions::clear_direction_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_name_.ClearToEmpty();
}
inline const std::string& Directions::direction_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shapecollection.Directions.direction_name)
  return _internal_direction_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Directions::set_direction_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:shapecollection.Directions.direction_name)
}
inline std::string* Directions::mutable_direction_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_direction_name();
  // @@protoc_insertion_point(field_mutable:shapecollection.Directions.direction_name)
  return _s;
}
inline const std::string& Directions::_internal_direction_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.direction_name_.Get();
}
inline void Directions::_internal_set_direction_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_name_.Set(value, GetArena());
}
inline std::string* Directions::_internal_mutable_direction_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.direction_name_.Mutable( GetArena());
}
inline std::string* Directions::release_direction_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shapecollection.Directions.direction_name)
  return _impl_.direction_name_.Release();
}
inline void Directions::set_allocated_direction_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.direction_name_.IsDefault()) {
    _impl_.direction_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:shapecollection.Directions.direction_name)
}

// bool active = 2;
inline void Directions::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = false;
}
inline bool Directions::active() const {
  // @@protoc_insertion_point(field_get:shapecollection.Directions.active)
  return _internal_active();
}
inline void Directions::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:shapecollection.Directions.active)
}
inline bool Directions::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_;
}
inline void Directions::_internal_set_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// .grid.Shapes shape_metrics = 3;
inline bool Directions::has_shape_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shape_metrics_ != nullptr);
  return value;
}
inline const ::grid::Shapes& Directions::_internal_shape_metrics() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::grid::Shapes* p = _impl_.shape_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::grid::Shapes&>(::grid::_Shapes_default_instance_);
}
inline const ::grid::Shapes& Directions::shape_metrics() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:shapecollection.Directions.shape_metrics)
  return _internal_shape_metrics();
}
inline void Directions::unsafe_arena_set_allocated_shape_metrics(::grid::Shapes* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_metrics_);
  }
  _impl_.shape_metrics_ = reinterpret_cast<::grid::Shapes*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:shapecollection.Directions.shape_metrics)
}
inline ::grid::Shapes* Directions::release_shape_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::grid::Shapes* released = _impl_.shape_metrics_;
  _impl_.shape_metrics_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::grid::Shapes* Directions::unsafe_arena_release_shape_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:shapecollection.Directions.shape_metrics)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::grid::Shapes* temp = _impl_.shape_metrics_;
  _impl_.shape_metrics_ = nullptr;
  return temp;
}
inline ::grid::Shapes* Directions::_internal_mutable_shape_metrics() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shape_metrics_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::grid::Shapes>(GetArena());
    _impl_.shape_metrics_ = reinterpret_cast<::grid::Shapes*>(p);
  }
  return _impl_.shape_metrics_;
}
inline ::grid::Shapes* Directions::mutable_shape_metrics() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::grid::Shapes* _msg = _internal_mutable_shape_metrics();
  // @@protoc_insertion_point(field_mutable:shapecollection.Directions.shape_metrics)
  return _msg;
}
inline void Directions::set_allocated_shape_metrics(::grid::Shapes* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shape_metrics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.shape_metrics_ = reinterpret_cast<::grid::Shapes*>(value);
  // @@protoc_insertion_point(field_set_allocated:shapecollection.Directions.shape_metrics)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace shapecollection


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // shapecollection_2eproto_2epb_2eh
