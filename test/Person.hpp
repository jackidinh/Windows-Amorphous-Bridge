// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Person.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_PERSON_HPP
#define FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_PERSON_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PERSON_SOURCE)
#define PERSON_DllAPI __declspec( dllexport )
#else
#define PERSON_DllAPI __declspec( dllimport )
#endif // PERSON_SOURCE
#else
#define PERSON_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define PERSON_DllAPI
#endif // _WIN32

namespace test_msgs_pkg {

namespace msg {

/*!
 * @brief This class represents the structure Person defined by the user in the IDL file.
 * @ingroup Person
 */
class Person
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Person()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Person()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Person that will be copied.
     */
    eProsima_user_DllExport Person(
            const Person& x)
    {
                    m_name = x.m_name;

                    m_id = x.m_id;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Person that will be copied.
     */
    eProsima_user_DllExport Person(
            Person&& x) noexcept
    {
        m_name = std::move(x.m_name);
        m_id = x.m_id;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Person that will be copied.
     */
    eProsima_user_DllExport Person& operator =(
            const Person& x)
    {

                    m_name = x.m_name;

                    m_id = x.m_id;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Person that will be copied.
     */
    eProsima_user_DllExport Person& operator =(
            Person&& x) noexcept
    {

        m_name = std::move(x.m_name);
        m_id = x.m_id;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Person object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Person& x) const
    {
        return (m_name == x.m_name &&
           m_id == x.m_id);
    }

    /*!
     * @brief Comparison operator.
     * @param x Person object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Person& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member name
     * @param _name New value to be copied in member name
     */
    eProsima_user_DllExport void name(
            const std::string& _name)
    {
        m_name = _name;
    }

    /*!
     * @brief This function moves the value in member name
     * @param _name New value to be moved in member name
     */
    eProsima_user_DllExport void name(
            std::string&& _name)
    {
        m_name = std::move(_name);
    }

    /*!
     * @brief This function returns a constant reference to member name
     * @return Constant reference to member name
     */
    eProsima_user_DllExport const std::string& name() const
    {
        return m_name;
    }

    /*!
     * @brief This function returns a reference to member name
     * @return Reference to member name
     */
    eProsima_user_DllExport std::string& name()
    {
        return m_name;
    }


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            int32_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport int32_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport int32_t& id()
    {
        return m_id;
    }



private:

    std::string m_name;
    int32_t m_id{0};

};

} // namespace msg

} // namespace test_msgs_pkg

#endif // _FAST_DDS_GENERATED_TEST_MSGS_PKG_MSG_PERSON_HPP_


