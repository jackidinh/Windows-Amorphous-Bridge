// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file AreaSearchStatus.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_AREASEARCHSTATUS_HPP
#define FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_AREASEARCHSTATUS_HPP

#include <cstdint>
#include <utility>
#include <vector>

#include "GeoRectangle.hpp"
#include "GeoCircle.hpp"
#include "GeoPolygon.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(AREASEARCHSTATUS_SOURCE)
#define AREASEARCHSTATUS_DllAPI __declspec( dllexport )
#else
#define AREASEARCHSTATUS_DllAPI __declspec( dllimport )
#endif // AREASEARCHSTATUS_SOURCE
#else
#define AREASEARCHSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define AREASEARCHSTATUS_DllAPI
#endif // _WIN32

namespace test_msgs_pkg {

namespace msg {

/*!
 * @brief This class represents the structure AreaSearchStatus defined by the user in the IDL file.
 * @ingroup AreaSearchStatus
 */
class AreaSearchStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AreaSearchStatus()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AreaSearchStatus()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AreaSearchStatus that will be copied.
     */
    eProsima_user_DllExport AreaSearchStatus(
            const AreaSearchStatus& x)
    {
                    m_vehicle_id = x.m_vehicle_id;

                    m_timestamp_epoch_usec = x.m_timestamp_epoch_usec;

                    m_estimated_completion_time_epoch_usec = x.m_estimated_completion_time_epoch_usec;

                    m_estimated_percent_complete = x.m_estimated_percent_complete;

                    m_heatmap_bounding_box = x.m_heatmap_bounding_box;

                    m_heatmap_height = x.m_heatmap_height;

                    m_heatmap_width = x.m_heatmap_width;

                    m_heatmap_data = x.m_heatmap_data;

                    m_active_geometry_type = x.m_active_geometry_type;

                    m_polygon = x.m_polygon;

                    m_circle = x.m_circle;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AreaSearchStatus that will be copied.
     */
    eProsima_user_DllExport AreaSearchStatus(
            AreaSearchStatus&& x) noexcept
    {
        m_vehicle_id = x.m_vehicle_id;
        m_timestamp_epoch_usec = x.m_timestamp_epoch_usec;
        m_estimated_completion_time_epoch_usec = x.m_estimated_completion_time_epoch_usec;
        m_estimated_percent_complete = x.m_estimated_percent_complete;
        m_heatmap_bounding_box = std::move(x.m_heatmap_bounding_box);
        m_heatmap_height = x.m_heatmap_height;
        m_heatmap_width = x.m_heatmap_width;
        m_heatmap_data = std::move(x.m_heatmap_data);
        m_active_geometry_type = x.m_active_geometry_type;
        m_polygon = std::move(x.m_polygon);
        m_circle = std::move(x.m_circle);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AreaSearchStatus that will be copied.
     */
    eProsima_user_DllExport AreaSearchStatus& operator =(
            const AreaSearchStatus& x)
    {

                    m_vehicle_id = x.m_vehicle_id;

                    m_timestamp_epoch_usec = x.m_timestamp_epoch_usec;

                    m_estimated_completion_time_epoch_usec = x.m_estimated_completion_time_epoch_usec;

                    m_estimated_percent_complete = x.m_estimated_percent_complete;

                    m_heatmap_bounding_box = x.m_heatmap_bounding_box;

                    m_heatmap_height = x.m_heatmap_height;

                    m_heatmap_width = x.m_heatmap_width;

                    m_heatmap_data = x.m_heatmap_data;

                    m_active_geometry_type = x.m_active_geometry_type;

                    m_polygon = x.m_polygon;

                    m_circle = x.m_circle;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AreaSearchStatus that will be copied.
     */
    eProsima_user_DllExport AreaSearchStatus& operator =(
            AreaSearchStatus&& x) noexcept
    {

        m_vehicle_id = x.m_vehicle_id;
        m_timestamp_epoch_usec = x.m_timestamp_epoch_usec;
        m_estimated_completion_time_epoch_usec = x.m_estimated_completion_time_epoch_usec;
        m_estimated_percent_complete = x.m_estimated_percent_complete;
        m_heatmap_bounding_box = std::move(x.m_heatmap_bounding_box);
        m_heatmap_height = x.m_heatmap_height;
        m_heatmap_width = x.m_heatmap_width;
        m_heatmap_data = std::move(x.m_heatmap_data);
        m_active_geometry_type = x.m_active_geometry_type;
        m_polygon = std::move(x.m_polygon);
        m_circle = std::move(x.m_circle);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x AreaSearchStatus object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AreaSearchStatus& x) const
    {
        return (m_vehicle_id == x.m_vehicle_id &&
           m_timestamp_epoch_usec == x.m_timestamp_epoch_usec &&
           m_estimated_completion_time_epoch_usec == x.m_estimated_completion_time_epoch_usec &&
           m_estimated_percent_complete == x.m_estimated_percent_complete &&
           m_heatmap_bounding_box == x.m_heatmap_bounding_box &&
           m_heatmap_height == x.m_heatmap_height &&
           m_heatmap_width == x.m_heatmap_width &&
           m_heatmap_data == x.m_heatmap_data &&
           m_active_geometry_type == x.m_active_geometry_type &&
           m_polygon == x.m_polygon &&
           m_circle == x.m_circle);
    }

    /*!
     * @brief Comparison operator.
     * @param x AreaSearchStatus object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AreaSearchStatus& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member vehicle_id
     * @param _vehicle_id New value for member vehicle_id
     */
    eProsima_user_DllExport void vehicle_id(
            uint64_t _vehicle_id)
    {
        m_vehicle_id = _vehicle_id;
    }

    /*!
     * @brief This function returns the value of member vehicle_id
     * @return Value of member vehicle_id
     */
    eProsima_user_DllExport uint64_t vehicle_id() const
    {
        return m_vehicle_id;
    }

    /*!
     * @brief This function returns a reference to member vehicle_id
     * @return Reference to member vehicle_id
     */
    eProsima_user_DllExport uint64_t& vehicle_id()
    {
        return m_vehicle_id;
    }


    /*!
     * @brief This function sets a value in member timestamp_epoch_usec
     * @param _timestamp_epoch_usec New value for member timestamp_epoch_usec
     */
    eProsima_user_DllExport void timestamp_epoch_usec(
            uint64_t _timestamp_epoch_usec)
    {
        m_timestamp_epoch_usec = _timestamp_epoch_usec;
    }

    /*!
     * @brief This function returns the value of member timestamp_epoch_usec
     * @return Value of member timestamp_epoch_usec
     */
    eProsima_user_DllExport uint64_t timestamp_epoch_usec() const
    {
        return m_timestamp_epoch_usec;
    }

    /*!
     * @brief This function returns a reference to member timestamp_epoch_usec
     * @return Reference to member timestamp_epoch_usec
     */
    eProsima_user_DllExport uint64_t& timestamp_epoch_usec()
    {
        return m_timestamp_epoch_usec;
    }


    /*!
     * @brief This function sets a value in member estimated_completion_time_epoch_usec
     * @param _estimated_completion_time_epoch_usec New value for member estimated_completion_time_epoch_usec
     */
    eProsima_user_DllExport void estimated_completion_time_epoch_usec(
            uint64_t _estimated_completion_time_epoch_usec)
    {
        m_estimated_completion_time_epoch_usec = _estimated_completion_time_epoch_usec;
    }

    /*!
     * @brief This function returns the value of member estimated_completion_time_epoch_usec
     * @return Value of member estimated_completion_time_epoch_usec
     */
    eProsima_user_DllExport uint64_t estimated_completion_time_epoch_usec() const
    {
        return m_estimated_completion_time_epoch_usec;
    }

    /*!
     * @brief This function returns a reference to member estimated_completion_time_epoch_usec
     * @return Reference to member estimated_completion_time_epoch_usec
     */
    eProsima_user_DllExport uint64_t& estimated_completion_time_epoch_usec()
    {
        return m_estimated_completion_time_epoch_usec;
    }


    /*!
     * @brief This function sets a value in member estimated_percent_complete
     * @param _estimated_percent_complete New value for member estimated_percent_complete
     */
    eProsima_user_DllExport void estimated_percent_complete(
            float _estimated_percent_complete)
    {
        m_estimated_percent_complete = _estimated_percent_complete;
    }

    /*!
     * @brief This function returns the value of member estimated_percent_complete
     * @return Value of member estimated_percent_complete
     */
    eProsima_user_DllExport float estimated_percent_complete() const
    {
        return m_estimated_percent_complete;
    }

    /*!
     * @brief This function returns a reference to member estimated_percent_complete
     * @return Reference to member estimated_percent_complete
     */
    eProsima_user_DllExport float& estimated_percent_complete()
    {
        return m_estimated_percent_complete;
    }


    /*!
     * @brief This function copies the value in member heatmap_bounding_box
     * @param _heatmap_bounding_box New value to be copied in member heatmap_bounding_box
     */
    eProsima_user_DllExport void heatmap_bounding_box(
            const GeoRectangle& _heatmap_bounding_box)
    {
        m_heatmap_bounding_box = _heatmap_bounding_box;
    }

    /*!
     * @brief This function moves the value in member heatmap_bounding_box
     * @param _heatmap_bounding_box New value to be moved in member heatmap_bounding_box
     */
    eProsima_user_DllExport void heatmap_bounding_box(
            GeoRectangle&& _heatmap_bounding_box)
    {
        m_heatmap_bounding_box = std::move(_heatmap_bounding_box);
    }

    /*!
     * @brief This function returns a constant reference to member heatmap_bounding_box
     * @return Constant reference to member heatmap_bounding_box
     */
    eProsima_user_DllExport const GeoRectangle& heatmap_bounding_box() const
    {
        return m_heatmap_bounding_box;
    }

    /*!
     * @brief This function returns a reference to member heatmap_bounding_box
     * @return Reference to member heatmap_bounding_box
     */
    eProsima_user_DllExport GeoRectangle& heatmap_bounding_box()
    {
        return m_heatmap_bounding_box;
    }


    /*!
     * @brief This function sets a value in member heatmap_height
     * @param _heatmap_height New value for member heatmap_height
     */
    eProsima_user_DllExport void heatmap_height(
            uint16_t _heatmap_height)
    {
        m_heatmap_height = _heatmap_height;
    }

    /*!
     * @brief This function returns the value of member heatmap_height
     * @return Value of member heatmap_height
     */
    eProsima_user_DllExport uint16_t heatmap_height() const
    {
        return m_heatmap_height;
    }

    /*!
     * @brief This function returns a reference to member heatmap_height
     * @return Reference to member heatmap_height
     */
    eProsima_user_DllExport uint16_t& heatmap_height()
    {
        return m_heatmap_height;
    }


    /*!
     * @brief This function sets a value in member heatmap_width
     * @param _heatmap_width New value for member heatmap_width
     */
    eProsima_user_DllExport void heatmap_width(
            uint16_t _heatmap_width)
    {
        m_heatmap_width = _heatmap_width;
    }

    /*!
     * @brief This function returns the value of member heatmap_width
     * @return Value of member heatmap_width
     */
    eProsima_user_DllExport uint16_t heatmap_width() const
    {
        return m_heatmap_width;
    }

    /*!
     * @brief This function returns a reference to member heatmap_width
     * @return Reference to member heatmap_width
     */
    eProsima_user_DllExport uint16_t& heatmap_width()
    {
        return m_heatmap_width;
    }


    /*!
     * @brief This function copies the value in member heatmap_data
     * @param _heatmap_data New value to be copied in member heatmap_data
     */
    eProsima_user_DllExport void heatmap_data(
            const std::vector<uint8_t>& _heatmap_data)
    {
        m_heatmap_data = _heatmap_data;
    }

    /*!
     * @brief This function moves the value in member heatmap_data
     * @param _heatmap_data New value to be moved in member heatmap_data
     */
    eProsima_user_DllExport void heatmap_data(
            std::vector<uint8_t>&& _heatmap_data)
    {
        m_heatmap_data = std::move(_heatmap_data);
    }

    /*!
     * @brief This function returns a constant reference to member heatmap_data
     * @return Constant reference to member heatmap_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& heatmap_data() const
    {
        return m_heatmap_data;
    }

    /*!
     * @brief This function returns a reference to member heatmap_data
     * @return Reference to member heatmap_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& heatmap_data()
    {
        return m_heatmap_data;
    }


    /*!
     * @brief This function sets a value in member active_geometry_type
     * @param _active_geometry_type New value for member active_geometry_type
     */
    eProsima_user_DllExport void active_geometry_type(
            uint8_t _active_geometry_type)
    {
        m_active_geometry_type = _active_geometry_type;
    }

    /*!
     * @brief This function returns the value of member active_geometry_type
     * @return Value of member active_geometry_type
     */
    eProsima_user_DllExport uint8_t active_geometry_type() const
    {
        return m_active_geometry_type;
    }

    /*!
     * @brief This function returns a reference to member active_geometry_type
     * @return Reference to member active_geometry_type
     */
    eProsima_user_DllExport uint8_t& active_geometry_type()
    {
        return m_active_geometry_type;
    }


    /*!
     * @brief This function copies the value in member polygon
     * @param _polygon New value to be copied in member polygon
     */
    eProsima_user_DllExport void polygon(
            const std::vector<GeoPolygon>& _polygon)
    {
        m_polygon = _polygon;
    }

    /*!
     * @brief This function moves the value in member polygon
     * @param _polygon New value to be moved in member polygon
     */
    eProsima_user_DllExport void polygon(
            std::vector<GeoPolygon>&& _polygon)
    {
        m_polygon = std::move(_polygon);
    }

    /*!
     * @brief This function returns a constant reference to member polygon
     * @return Constant reference to member polygon
     */
    eProsima_user_DllExport const std::vector<GeoPolygon>& polygon() const
    {
        return m_polygon;
    }

    /*!
     * @brief This function returns a reference to member polygon
     * @return Reference to member polygon
     */
    eProsima_user_DllExport std::vector<GeoPolygon>& polygon()
    {
        return m_polygon;
    }


    /*!
     * @brief This function copies the value in member circle
     * @param _circle New value to be copied in member circle
     */
    eProsima_user_DllExport void circle(
            const std::vector<GeoCircle>& _circle)
    {
        m_circle = _circle;
    }

    /*!
     * @brief This function moves the value in member circle
     * @param _circle New value to be moved in member circle
     */
    eProsima_user_DllExport void circle(
            std::vector<GeoCircle>&& _circle)
    {
        m_circle = std::move(_circle);
    }

    /*!
     * @brief This function returns a constant reference to member circle
     * @return Constant reference to member circle
     */
    eProsima_user_DllExport const std::vector<GeoCircle>& circle() const
    {
        return m_circle;
    }

    /*!
     * @brief This function returns a reference to member circle
     * @return Reference to member circle
     */
    eProsima_user_DllExport std::vector<GeoCircle>& circle()
    {
        return m_circle;
    }



private:

    uint64_t m_vehicle_id{0};
    uint64_t m_timestamp_epoch_usec{0};
    uint64_t m_estimated_completion_time_epoch_usec{0};
    float m_estimated_percent_complete{0.0};
    GeoRectangle m_heatmap_bounding_box;
    uint16_t m_heatmap_height{0};
    uint16_t m_heatmap_width{0};
    std::vector<uint8_t> m_heatmap_data;
    uint8_t m_active_geometry_type{0};
    std::vector<GeoPolygon> m_polygon;
    std::vector<GeoCircle> m_circle;

};

} // namespace msg

} // namespace test_msgs_pkg

#endif // _FAST_DDS_GENERATED_TEST_MSGS_PKG_MSG_AREASEARCHSTATUS_HPP_


