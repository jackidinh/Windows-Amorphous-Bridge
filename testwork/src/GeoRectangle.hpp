// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GeoRectangle.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_GEORECTANGLE_HPP
#define FAST_DDS_GENERATED__TEST_MSGS_PKG_MSG_GEORECTANGLE_HPP

#include <cstdint>
#include <utility>
#include "GeoPoint.hpp"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(GEORECTANGLE_SOURCE)
#define GEORECTANGLE_DllAPI __declspec( dllexport )
#else
#define GEORECTANGLE_DllAPI __declspec( dllimport )
#endif // GEORECTANGLE_SOURCE
#else
#define GEORECTANGLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define GEORECTANGLE_DllAPI
#endif // _WIN32

namespace test_msgs_pkg {

namespace msg {

/*!
 * @brief This class represents the structure GeoRectangle defined by the user in the IDL file.
 * @ingroup GeoRectangle
 */
class GeoRectangle
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GeoRectangle()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GeoRectangle()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object GeoRectangle that will be copied.
     */
    eProsima_user_DllExport GeoRectangle(
            const GeoRectangle& x)
    {
                    m_upper_left_point = x.m_upper_left_point;

                    m_bottom_right_point = x.m_bottom_right_point;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object GeoRectangle that will be copied.
     */
    eProsima_user_DllExport GeoRectangle(
            GeoRectangle&& x) noexcept
    {
        m_upper_left_point = std::move(x.m_upper_left_point);
        m_bottom_right_point = std::move(x.m_bottom_right_point);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object GeoRectangle that will be copied.
     */
    eProsima_user_DllExport GeoRectangle& operator =(
            const GeoRectangle& x)
    {

                    m_upper_left_point = x.m_upper_left_point;

                    m_bottom_right_point = x.m_bottom_right_point;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object GeoRectangle that will be copied.
     */
    eProsima_user_DllExport GeoRectangle& operator =(
            GeoRectangle&& x) noexcept
    {

        m_upper_left_point = std::move(x.m_upper_left_point);
        m_bottom_right_point = std::move(x.m_bottom_right_point);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x GeoRectangle object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GeoRectangle& x) const
    {
        return (m_upper_left_point == x.m_upper_left_point &&
           m_bottom_right_point == x.m_bottom_right_point);
    }

    /*!
     * @brief Comparison operator.
     * @param x GeoRectangle object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GeoRectangle& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member upper_left_point
     * @param _upper_left_point New value to be copied in member upper_left_point
     */
    eProsima_user_DllExport void upper_left_point(
            const GeoPoint& _upper_left_point)
    {
        m_upper_left_point = _upper_left_point;
    }

    /*!
     * @brief This function moves the value in member upper_left_point
     * @param _upper_left_point New value to be moved in member upper_left_point
     */
    eProsima_user_DllExport void upper_left_point(
            GeoPoint&& _upper_left_point)
    {
        m_upper_left_point = std::move(_upper_left_point);
    }

    /*!
     * @brief This function returns a constant reference to member upper_left_point
     * @return Constant reference to member upper_left_point
     */
    eProsima_user_DllExport const GeoPoint& upper_left_point() const
    {
        return m_upper_left_point;
    }

    /*!
     * @brief This function returns a reference to member upper_left_point
     * @return Reference to member upper_left_point
     */
    eProsima_user_DllExport GeoPoint& upper_left_point()
    {
        return m_upper_left_point;
    }


    /*!
     * @brief This function copies the value in member bottom_right_point
     * @param _bottom_right_point New value to be copied in member bottom_right_point
     */
    eProsima_user_DllExport void bottom_right_point(
            const GeoPoint& _bottom_right_point)
    {
        m_bottom_right_point = _bottom_right_point;
    }

    /*!
     * @brief This function moves the value in member bottom_right_point
     * @param _bottom_right_point New value to be moved in member bottom_right_point
     */
    eProsima_user_DllExport void bottom_right_point(
            GeoPoint&& _bottom_right_point)
    {
        m_bottom_right_point = std::move(_bottom_right_point);
    }

    /*!
     * @brief This function returns a constant reference to member bottom_right_point
     * @return Constant reference to member bottom_right_point
     */
    eProsima_user_DllExport const GeoPoint& bottom_right_point() const
    {
        return m_bottom_right_point;
    }

    /*!
     * @brief This function returns a reference to member bottom_right_point
     * @return Reference to member bottom_right_point
     */
    eProsima_user_DllExport GeoPoint& bottom_right_point()
    {
        return m_bottom_right_point;
    }



private:

    GeoPoint m_upper_left_point;
    GeoPoint m_bottom_right_point;

};

} // namespace msg

} // namespace test_msgs_pkg

#endif // _FAST_DDS_GENERATED_TEST_MSGS_PKG_MSG_GEORECTANGLE_HPP_


