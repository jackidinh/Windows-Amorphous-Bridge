// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PersonPublisherApp.cxx
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <iostream>
#include <nng/nng.h>
#include <nng/protocol/pubsub0/sub.h>
#include <chrono>
#include <string>
#include "person.pb.h"

#include "PersonPublisherApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>

#include "PersonPubSubTypes.hpp"

using namespace eprosima::fastdds::dds;

PersonPublisherApp::PersonPublisherApp(
    const int& domain_id)
    : factory_(nullptr)
    , participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new test_msgs_pkg::msg::PersonPubSubType())
    , matched_(0)
    , samples_sent_(0)
    , stop_(false)
{
    //

    // Create the participant
    DomainParticipantQos pqos = PARTICIPANT_QOS_DEFAULT;
    pqos.name("test_msgs_pkg::msg::Person_pub_participant");
    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Participant initialization failed");
    }

    // Register the type
    type_.register_type(participant_);

    // Create the publisher
    PublisherQos pub_qos = PUBLISHER_QOS_DEFAULT;
    participant_->get_default_publisher_qos(pub_qos);
    publisher_ = participant_->create_publisher(pub_qos, nullptr, StatusMask::none());
    if (publisher_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Publisher initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("rt/person_topic", "test_msgs_pkg::msg::dds_::Person_", topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Topic initialization failed");
    }

    // Create the data writer
    DataWriterQos writer_qos = DATAWRITER_QOS_DEFAULT;
    publisher_->get_default_datawriter_qos(writer_qos);
    writer_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    writer_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    writer_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    writer_ = publisher_->create_datawriter(topic_, writer_qos, this, StatusMask::all());
    if (writer_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person DataWriter initialization failed");
    }
}

PersonPublisherApp::~PersonPublisherApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void PersonPublisherApp::on_publication_matched(
    DataWriter* /*writer*/,
    const PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "test_msgs_pkg::msg::Person Publisher matched." << std::endl;
        cv_.notify_one();
    }
    else if (info.current_count_change == -1)
    {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            matched_ = info.current_count;
        }
        std::cout << "test_msgs_pkg::msg::Person Publisher unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
            << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void PersonPublisherApp::run()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;
    std::cout << "Waiting to Connect to NNG Publisher\n";
    nng_socket sock;
    int rv;

    if ((rv = nng_sub0_open(&sock)) != 0) {
        std::cerr << "Failed to open sub socket\n";
        return;
    }

    if ((rv = nng_setopt(sock, NNG_OPT_SUB_SUBSCRIBE, "", 0)) != 0) {
        std::cerr << "Failed to set subscribe option\n";
        nng_close(sock);
        return;
    }

    if ((rv = nng_dial(sock, "tcp://127.0.0.1:5554", NULL, 0)) != 0) {
        std::cerr << "Failed to connect to publisher\n";
        nng_close(sock);
        return;
    }

    std::cout << "Connected to publisher. Waiting for messages...\n";

    std::cout << "test_msgs_pkg::msg::Person DataWriter waiting for DataReaders." << std::endl;

    {
        std::unique_lock<std::mutex> lock(mutex_);
        cv_.wait(lock, [this]() { return matched_ > 0 || is_stopped(); });
    }

    std::cout << "MATCHED." << std::endl;

    while (!is_stopped())
    {
        char* buf = nullptr;
        size_t sz;

        if ((rv = nng_recv(sock, &buf, &sz, NNG_FLAG_ALLOC)) != 0) {
            std::cout << "NNG RECEIVE FAILED\n";
            continue;
        }

        std::string data(buf, sz);
        nng_free(buf, sz);
        std::cout << "Raw bytes from NNG:\n";
        for (char c : data) {
            std::cout << std::hex << (int)(unsigned char)c << " ";
        }
        std::cout << "\n";

        std::cout << "Data received from NNG: "<< "\n";
        Person person;
        bool parsed = person.ParseFromString(data);
        std::cout << "Parse success: " << parsed << std::endl;
      

        test_msgs_pkg::msg::Person st;
        st.name()="Olivia";  //Cannot parse name from received protobuffer
        st.id() = person.id();

        std::cout << "Publishing to ROS:\n";
        std::cout << "Name: " << person.name() << "\n";
        writer_->write(&st);
        std::cout << "Published to ROS\n";
    }
    nng_close(sock);
}


bool PersonPublisherApp::is_stopped()
{
    return stop_.load();
}

void PersonPublisherApp::stop()
{
    stop_.store(true);
    cv_.notify_one();
}