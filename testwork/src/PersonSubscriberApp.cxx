// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PersonSubscriberApp.cxx
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#include <iostream>
#include <nng/nng.h>
#include <nng/protocol/pubsub0/pub.h>
#include <chrono>
#include <string>
#include "person.pb.h"

#include "PersonSubscriberApp.hpp"

#include <condition_variable>
#include <csignal>
#include <stdexcept>
#include <thread>

#include <fastdds/dds/core/status/SubscriptionMatchedStatus.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/subscriber/DataReader.hpp>
#include <fastdds/dds/subscriber/qos/DataReaderQos.hpp>
#include <fastdds/dds/subscriber/qos/SubscriberQos.hpp>
#include <fastdds/dds/subscriber/SampleInfo.hpp>
#include <fastdds/dds/subscriber/Subscriber.hpp>

#include "PersonPubSubTypes.hpp"

using namespace eprosima::fastdds::dds;

PersonSubscriberApp::PersonSubscriberApp(
        const int& domain_id)
    : factory_(nullptr)
    , participant_(nullptr)
    , subscriber_(nullptr)
    , topic_(nullptr)
    , reader_(nullptr)
    , type_(new test_msgs_pkg::msg::PersonPubSubType())
    , samples_received_(0)
    , stop_(false)
{
    // Create the participant
    DomainParticipantQos pqos = PARTICIPANT_QOS_DEFAULT;
    pqos.name("test_msgs_pkg::msg::Person_sub_participant");
    factory_ = DomainParticipantFactory::get_shared_instance();
    participant_ = factory_->create_participant(domain_id, pqos, nullptr, StatusMask::none());
    if (participant_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Participant initialization failed");
    }

    // Register the type
    type_.register_type(participant_);

    // Create the subscriber
    SubscriberQos sub_qos = SUBSCRIBER_QOS_DEFAULT;
    participant_->get_default_subscriber_qos(sub_qos);
    subscriber_ = participant_->create_subscriber(sub_qos, nullptr, StatusMask::none());
    if (subscriber_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Subscriber initialization failed");
    }

    // Create the topic
    TopicQos topic_qos = TOPIC_QOS_DEFAULT;
    participant_->get_default_topic_qos(topic_qos);
    topic_ = participant_->create_topic("rt/person_topic", "test_msgs_pkg::msg::dds_::Person_", topic_qos);
    if (topic_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person Topic initialization failed");
    }

    // Create the reader
    DataReaderQos reader_qos = DATAREADER_QOS_DEFAULT;
    subscriber_->get_default_datareader_qos(reader_qos);
    reader_qos.reliability().kind = ReliabilityQosPolicyKind::RELIABLE_RELIABILITY_QOS;
    reader_qos.durability().kind = DurabilityQosPolicyKind::TRANSIENT_LOCAL_DURABILITY_QOS;
    reader_qos.history().kind = HistoryQosPolicyKind::KEEP_ALL_HISTORY_QOS;
    reader_ = subscriber_->create_datareader(topic_, reader_qos, this, StatusMask::all());
    if (reader_ == nullptr)
    {
        throw std::runtime_error("test_msgs_pkg::msg::Person DataReader initialization failed");
    }

    int rv = nng_pub0_open(&nng_pub_socket);
    if(rv!=0){
        std::cout<<"Failed to open NNG PUB Socket\n";

    }
    rv = nng_listen(nng_pub_socket,"tcp://127.0.0.1:5561",nullptr,0);
    if (rv!=0){
        nng_close(nng_pub_socket);
        std::cout<<"Failed to listen on NNG PUB socket\n";
    }
}

PersonSubscriberApp::~PersonSubscriberApp()
{
    if (nullptr != participant_)
    {
        // Delete DDS entities contained within the DomainParticipant
        participant_->delete_contained_entities();

        // Delete DomainParticipant
        factory_->delete_participant(participant_);
    }
}

void PersonSubscriberApp::on_subscription_matched(
        DataReader* /*reader*/,
        const SubscriptionMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        std::cout << "test_msgs_pkg::msg::Person Subscriber matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        std::cout << "test_msgs_pkg::msg::Person Subscriber unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for SubscriptionMatchedStatus current count change" << std::endl;
    }
}

void PersonSubscriberApp::on_data_available(
        DataReader* reader)
{
    test_msgs_pkg::msg::Person sample_;
    SampleInfo info;
    while ((!is_stopped()) && (RETCODE_OK == reader->take_next_sample(&sample_, &info)))
    {
        if ((info.instance_state == ALIVE_INSTANCE_STATE) && info.valid_data)
        {
            std::cout << "Sample RECEIVED\n" << std::endl;
            std::cout << "Name: " << sample_.name()<<"\n";
            std::cout << "Name: " << sample_.id() << "\n";

            Person proto_msg;
            //proto_msg.set_name(sample_.name().c_str());
            proto_msg.set_name(sample_.name());
            proto_msg.set_id(sample_.id());

            std::cout << "Here is the new NNG Proto:\n";
            std::cout << "Name: " << proto_msg.name()<<"\n";
            std::cout << "ID: " << proto_msg.id() << "\n";

            std::string serialized;
            proto_msg.SerializeToString(&serialized);

            std::cout << "Raw bytes from Serialized Proto:\n";
            for (char c : serialized) {
                std::cout << std::hex << (int)(unsigned char)c << " ";
            }
            std::cout << "\n";

            nng_msg* msg;
            int rv = nng_msg_alloc(&msg,serialized.size());
            std::cout << rv << "\n";
            std::cout << "About to send Message\n";
            if(rv ==0){
                memcpy(nng_msg_body(msg),serialized.data(),serialized.size());
                rv = nng_sendmsg(nng_pub_socket,msg,0);
                if (rv!=0){
                    std::cout<<"NNG Message Send Failed!\n";
                    nng_msg_free(msg);
                }
                else {
                    std::cout << "NNG Message Sent!\n";
                }
            }
        }
    }
}

void PersonSubscriberApp::run()
{
    std::unique_lock<std::mutex> lck(terminate_cv_mtx_);
    terminate_cv_.wait(lck, [this]
            {
                return is_stopped();
            });
}

bool PersonSubscriberApp::is_stopped()
{
    return stop_.load();
}

void PersonSubscriberApp::stop()
{
    stop_.store(true);
    terminate_cv_.notify_all();
}